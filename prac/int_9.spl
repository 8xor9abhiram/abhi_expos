alias  USER_SP R0;
USER_SP = SP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 9; //mode change

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 13] =SP;
SP=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 11]*512 -1; 

alias file_name R1;

file_name = [[PTBR + 2*(USER_SP-4)/512]*512 + (USER_SP-4)%512];

alias counter R2;
counter =1; //excluding root 

alias index R3;
index = -1; 

while(counter < 60) do
     if([INODE_TABLE+ counter*16 + 1]== file_name) then 
        index = counter;
        break;
     endif;
     counter = counter +1;
endwhile;

if(index == -1) then 
  alias PhysicalAddressret R4;
  PhysicalAddressret = [PTBR + 2*(USER_SP-1)/512]*512 +  (USER_SP-1)%512 ;
  [PhysicalAddressret] = -1;
  SP = USER_SP;
  [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 9] =0;
  ireturn;
endif;

//calling exit_process function
multipush(R0,R1,R2,R3);
R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;
multipop(R0,R1,R2,R3);

alias user_page R4;
user_page = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11];

[MEMORY_FREE_LIST + user_page] = [MEMORY_FREE_LIST + user_page] +1; //always 1

[SYSTEM_STATUS_TABLE + 2] =[SYSTEM_STATUS_TABLE + 2]-1;


SP=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 11]*512 -1; 

//per prosess resource table
alias i R12;
i = 1;
while(i<9) do
	[([PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 11]+1) *512 - 2*i] = -1;
i = i + 1;
endwhile;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 4] = RUNNING; //state change

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 7] =index;


//library
[PTBR  + 0]= 63;
[PTBR  + 1]= "0100";
[PTBR  + 2]= 64;
[PTBR  + 3]= "0100";

//heap
[PTBR  + 4]= -1;
[PTBR  + 5]= "0000";
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 2] = -1;
[PTBR  + 6]= -1;
[PTBR  + 7]= "0000";
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 3] = -1;

//stack
//1
multipush(R0,R1,R2,R3);
R1 = 1;
call MOD_2;
[PTBR  + 16]= R0;
[PTBR  + 17]= "0110";
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 8] = -1;
multipop(R0,R1,R2,R3);

//2
multipush(R0,R1,R2,R3);
R1 = 1;
call MOD_2;
[PTBR + 18]= R0;
[PTBR + 19]= "0110";
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 9] = -1;
multipop(R0,R1,R2,R3);

//code 
i = 8;
while(i<= 11)  do
     if(i==8 && [INODE_TABLE + index*16 + i] != -1) then
        multipush(R0,R1,R2,R3);
        R1 = 5; //get code page
        R2 = [INODE_TABLE + index*16 + i]; //1st block num
        call MOD_2;
        [PTBR  + 8 +(i-8)*2] = R0;
        [PTBR  + 8 + (i-8)*2 + 1]= "0100";
        multipop(R0,R1,R2,R3);
     else
        [PTBR  + 8 +(i-8)*2]= -1;
        [PTBR  + 8 + (i-8)*2 + 1]= "0000";
     endif;
     [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + i-4] = [INODE_TABLE + index*16 + i];
     i=i+1;
endwhile;


[[PTBR + 16]*512] = [[PTBR + 8]*512 + 1];

SP = 8*512 ;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0; //mode change
//breakpoint;
ireturn;