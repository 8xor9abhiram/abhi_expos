//device manager
alias fun_number R1;


// diskload
if(fun_number == 2)  then
   alias currentPID R2;
   alias pagenumber R3;
   alias blocknumber R4;

   //acquire disk
   multipush(R1,R2,R3,R4);
   R1=3;
   R2=currentPID;
   call MOD_0;
   multipop(R1,R2,R3,R4);

   [DISK_STATUS_TABLE + 1] = 0; 
   [DISK_STATUS_TABLE + 2] = pagenumber;
   [DISK_STATUS_TABLE + 3] = blocknumber;

   //breakpoint;

   load(pagenumber,blocknumber);

   //breakpoint;

   //change state
   [PROCESS_TABLE + (currentPID)*16 + 4]= WAIT_DISK;
   multipush(R1,R2,R3,R4);
   call MOD_5;  //schedular
   multipop(R1,R2,R3,R4);

   return;

endif;






  //terminal write
if(fun_number == 3)  then
   alias currentPID R2;

   //acquire terminal
   multipush(R1,R2,R3);
   R1=8;
   R2=[SYSTEM_STATUS_TABLE + 1];
   call MOD_0;
   multipop(R1,R2,R3);
   print R3;

   //release terminal
   multipush(R1,R2,R3);
   R1=9;
   R2=[SYSTEM_STATUS_TABLE + 1];
   call MOD_0;
   multipop(R1,R2,R3);
   return;
endif;

//terminalread
if(fun_number == 4)  then
   alias currentPID R2;
   alias address R3;

   //acquire terminal
   multipush(R1,R2,R3);
   R1=8;
   R2=[SYSTEM_STATUS_TABLE + 1];
   call MOD_0;
   multipop(R1,R2,R3);
   read;

   //change state
   [PROCESS_TABLE + (currentPID)*16 + 4]= WAIT_TERMINAL;
   multipush(R1,R2,R3);
   call MOD_5;  //schedular
   multipop(R1,R2,R3);

   [[PTBR + 2*(R3)/512]*512 + ((R3)%512)] = [PROCESS_TABLE + currentPID*16 + 8];
   return;

endif;